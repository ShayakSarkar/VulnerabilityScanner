#!/usr/bin/python3

from bs4 import BeautifulSoup
import re,requests, os
import pandas as pd

start_char=input("Enter the starting character of the products: ")
no_of_pages=int(input("Enter the number of pages: "))
if(start_char=='('):
    os.system('touch \(.json')
else:
    os.system('touch '+start_char+'.json')

file_des=os.open(start_char+".json",1)
file_stream=os.fdopen(file_des,"w")
file_stream.write('{"products":[\n')
temp_file_des=os.open("temp.txt",1)

def deleteSpecialCharacters(string):
    finalString=""
    for i in range(len(string)):
        if string[i]=='"' or string[i]=='\\':
            finalString+='\\'
        finalString+=string[i]
    return finalString

class CVE:
    def __init__(self,cve_id,cwe_id,no_of_exploits,vulnerability_types,publish_date,update_date,score,access_level,access,complexity,authentication,confidentiality,integrity,availability,notes):
        self.cve_id=deleteSpecialCharacters(cve_id)
        self.cwe_id=deleteSpecialCharacters(cwe_id)
        self.no_of_exploits=no_of_exploits
        self.vulnerability_types=deleteSpecialCharacters(vulnerability_types)
        self.publish_date=publish_date
        self.update_date=update_date
        self.score=score
        self.access_level=access_level
        self.access=access
        self.complexity=complexity
        self.authentication=authentication
        self.confidentiality=confidentiality
        self.integrity=integrity
        self.availability=availability
        self.notes=deleteSpecialCharacters(notes)

    def show(self):
        print("CVE details: ")
        print(self.cve_id,self.no_of_exploits,self.vulnerability_types,self.publish_date,self.update_date,self.score,self.access_level,self.access,self.complexity,self.authentication,self.confidentiality,self.integrity,self.availability,self.notes)
        
class Product:
    def __init__(self,name,cve_list):
        self.name=deleteSpecialCharacters(name)
        self.cve_list=cve_list

    def setName(self,name):
        self.name=name

    def addCve(self,cve):
        self.cve.append(cve)

    def show(self):
        print("Product name: ",self.name)
        for i in self.cve_list:
            i.show()
    
    def convertToJson(self):

        file_stream.write("{\n")
        file_stream.write("\"name\": \"{0}\",\n".format(self.name))
        file_stream.write("\"cve_list\": [\n")
        for i in range(len(self.cve_list)):
            file_stream.write("{\n")
            file_stream.write("\"cve_id\": \"{0}\",\n".format(self.cve_list[i].cve_id))
            file_stream.write("\"cwe_id\": \"{0}\",\n".format(self.cve_list[i].cwe_id))
            file_stream.write("\"no_of_exploits\": \"{0}\",\n".format(self.cve_list[i].no_of_exploits))
            file_stream.write("\"vulnerability_types\": \"{0}\",\n".format(self.cve_list[i].vulnerability_types))
            file_stream.write("\"publish_date\": \"{0}\",\n".format(self.cve_list[i].publish_date))
            file_stream.write("\"update_date\": \"{0}\",\n".format(self.cve_list[i].update_date))
            file_stream.write("\"score\": \"{0}\",\n".format(self.cve_list[i].score))
            file_stream.write("\"access_level\": \"{0}\",\n".format(self.cve_list[i].access_level))
            file_stream.write("\"access\": \"{0}\",\n".format(self.cve_list[i].access))
            file_stream.write("\"complexity\": \"{0}\",\n".format(self.cve_list[i].complexity))
            file_stream.write("\"authentication\": \"{0}\",\n".format(self.cve_list[i].authentication))

            file_stream.write("\"confidentiality\": \"{0}\",\n".format(self.cve_list[i].confidentiality))
            file_stream.write("\"integrity\": \"{0}\",\n".format(self.cve_list[i].integrity))
            file_stream.write("\"availability\": \"{0}\",\n".format(self.cve_list[i].availability))
            file_stream.write("\"notes\": \"{0}\"\n".format(self.cve_list[i].notes))
            file_stream.write("}\n")
            if(not i==len(self.cve_list)-1): 
                file_stream.write(",\n")
        file_stream.write("]\n") 
        file_stream.write("}\n")
        

url="https://www.cvedetails.com"
product_list=[]     #List of product objects which can be converted to json later
start_char=start_char.upper();

k=0
loader="#"
for page_no in range(1,no_of_pages+1):
    os.system('clear')
    print()
    print('Creating JSON database, this may take a few minutes ... ')
    print()
    print('Waiting for page no',page_no)
    print()
    print('#'*page_no,page_no)
    
    # Consistently try to fetch data from the required site ... upon failure, attempts to re-establish connection
    #============================================================================================================
    while True:
        try:
            site_obj=requests.get("https://www.cvedetails.com/product-list/product_type-/vendor_id-0/firstchar-"+start_char+"/page-"+str(page_no)+"/products.html?sha=e0d651db8ed489811a2ae32604ba69398b01fee4&trc=4068&order=1")
            if site_obj==None:
                print("site_obj invalid...retyring")
                continue
            break
        except:
            print("site_obj could not be found ... retrying")
    #============================================================================================================

    soup=BeautifulSoup(site_obj.content,features="html.parser");
    cve_links=soup.find_all("a",{"title":"See all vulnerabilities of this product"})
    p=re.compile("Product Details[\w | \s]*")
    product_names=soup.find_all("a",{"title":p})

    cve_links=[cve_links[i].get("href") for i in range(0,len(cve_links))]   # links for getting the cve details of products
    product_names=[product_names[i].get("title")[16:] for i in range(0,len(product_names))] #Stores the names of the products
    ctr=0   # Keeps track of the product names
    loader_sprite=['\\','|','/','--']   # Detects the internet speed
    for i in cve_links:
        
        os.system('clear')
        print()
        print('Creating JSON Database, this may take a few minutes ...\n')
        print('Collecting product details ...',product_names[ctr])
        print()
        print(page_no*"#",page_no,loader_sprite[ctr%4]) # Loads new sprite each time new product JSON is to be made
        
        product=Product(product_names[ctr],[])  # Product with no CVE details. Details are to be obtained later

        # Consistently try to fetch data from the required site ... upon failure, attempts to re-establish connection
        #============================================================================================================
        while True:
            try:
                product_site_obj=requests.get(url+i)    #Instance of the cve details page of product i
                if product_site_obj==None:
                    print("product_site_obj invalid ... retying")
                    continue
                break
            except:
                print("product_site_obj could not be found ... retrying")
        #============================================================================================================

        soup=BeautifulSoup(product_site_obj.content,"html.parser")  #Soup of the instance of cve details page
        
        
        #Extract all CVE Details from the CVE table
        #==========================================

        table=soup.find("table",{"id":"vulnslisttable"})
        rows=table.findChildren("tr")
        if(rows==None or rows==[]):
            continue

        k=0
        while k < (len(rows)-1):
            #print(k)
            cve_constructor_args=[]
            datas=rows[k].findChildren("td")
            if(datas==None or datas==[]):
                k+=1
                continue
            for data in datas:
                if(data.string!=None):
                    cve_constructor_args.append(data.string.strip())
                else:
                    cve_constructor_args.append("N/A")
            if rows[k+1].findChildren("td")[0].string!=None :         
                cve_constructor_args.append(rows[k+1].findChildren("td")[0].string.strip())
            else:
                cve_constructor_args.append("N/A")
            new_cve=CVE(*cve_constructor_args[1:])
            product.cve_list.append(new_cve)
            k+=2
            #product.show()
        #print(product.name)
        #product.show();
        print('\n\nNo of cves: ',len(product.cve_list))
        #input("Press enter")
        product.convertToJson() 
        if(not (ctr==len(cve_links)-1 and page_no==no_of_pages)):
            file_stream.write(',\n')
        ctr+=1       

file_stream.write(']}\n')
file_stream.close()


