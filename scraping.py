from bs4 import BeautifulSoup
import re,requests, os
import pandas as pd

file_des=os.open("op.json",1)
temp_file_des=os.open("temp.txt",1)

class CVE:
    def __init__(self,cve_id,cwe_id,no_of_exploits,vulnerability_types,publish_date,update_date,score,access_level,access,complexity,authentication,confidentiality,integrity,availability,notes):
        self.cve_id=cve_id
        self.cwe_id=cwe_id
        self.no_of_exploits=no_of_exploits
        self.vulnerability_types=vulnerability_types
        self.publish_date=publish_date
        self.update_date=update_date
        self.score=score
        self.access_level=access_level
        self.access=access
        self.complexity=complexity
        self.authentication=authentication
        self.confidentiality=confidentiality
        self.integrity=integrity
        self.availability=availability
        self.notes=notes

    def show(self):
        print("CVE details: ")
        print(self.cve_id,self.no_of_exploits,self.vulnerability_types,self.publish_date,self.update_date,self.score,self.access_level,self.access,self.complexity,self.authentication,self.confidentiality,self.integrity,self.availability,self.notes)
        
class Product:
    def __init__(self,name,cve_list):
        self.name=name
        self.cve_list=cve_list

    def setName(self,name):
        self.name=name

    def addCve(self,cve):
        self.cve.append(cve)

    def show(self):
        print("Product name: ",self.name)
        for i in self.cve_list:
            i.show()
    
    def convertToJson(self):
        
        os.dup2(1,temp_file_des)
        os.dup2(file_des,1)

        print("{")
        print("\"name\": \"{0}\",".format(self.name))
        print("\"cve_list\": [")
        for i in range(len(self.cve_list)):
            print("{")
            print("\"cve_id\": \"{0}\",".format(self.cve_list[i].cve_id))
            print("\"cwe_id\": \"{0}\",".format(self.cve_list[i].cwe_id))
            print("\"no_of_exploits\": \"{0}\",".format(self.cve_list[i].no_of_exploits))
            print("\"vulnerability_types\": \"{0}\",".format(self.cve_list[i].vulnerability_types))
            print("\"publish_date\": \"{0}\",".format(self.cve_list[i].publish_date))
            print("\"update_date\": \"{0}\",".format(self.cve_list[i].update_date))
            print("\"score\": \"{0}\",".format(self.cve_list[i].score))
            print("\"access_level\": \"{0}\",".format(self.cve_list[i].access_level))
            print("\"access\": \"{0}\",".format(self.cve_list[i].access))
            print("\"complexity\": \"{0}\",".format(self.cve_list[i].complexity))
            print("\"authentication\": \"{0}\",".format(self.cve_list[i].authentication))

            print("\"confidentiality\": \"{0}\",".format(self.cve_list[i].confidentiality))
            print("\"integrity\": \"{0}\",".format(self.cve_list[i].integrity))
            print("\"availability\": \"{0}\",".format(self.cve_list[i].availability))
            print("\"notes\": \"{0}\"".format(self.cve_list[i].notes))
            print("}")
            if(not i==len(self.cve_list)-1): 
                print(",")
        print("]") 
        print("}")
        os.dup2(temp_file_des,1)
        

url="https://www.cvedetails.com"

product_list=[]     #List of product objects which can be converted to json later



k=0
loader="#"
for page_no in range(1,83):
    os.system('clear')
    print('#'*page_no,page_no)

    site_obj=requests.get("https://www.cvedetails.com/product-list/product_type-/vendor_id-0/firstchar-A/page-"+str(page_no)+"/products.html?sha=e0d651db8ed489811a2ae32604ba69398b01fee4&trc=4068&order=1")

    soup=BeautifulSoup(site_obj.content,features="html.parser");
    cve_links=soup.find_all("a",{"title":"See all vulnerabilities of this product"})
    p=re.compile("Product Details[\w | \s]*")
    product_names=soup.find_all("a",{"title":p})

    cve_links=[cve_links[i].get("href") for i in range(0,len(cve_links))]   # links for getting the cve details of products
    product_names=[product_names[i].get("title")[16:] for i in range(0,len(product_names))] #Stores the names of the products
    ctr=0

    for i in cve_links:
        
        product=Product(product_names[ctr],[])  # Product with no CVE details. Details are to be obtained later
        product_site_obj=requests.get(url+i)    #Instance of the cve details page of product i
       
     
        soup=BeautifulSoup(product_site_obj.content,"html.parser")  #Soup of the instance of cve details page
        
        
        #Extract all CVE Details from the CVE table
        #-------------------------------------------

        table=soup.find("table",{"id":"vulnslisttable"})
        rows=table.findChildren("tr")
        if(rows==[]):
            continue

        k=0
        while k < (len(rows)-1):
            #print(k)
            cve_constructor_args=[]
            datas=rows[k].findChildren("td")
            if(datas==[]):
                k+=1
                continue
            for data in datas:
                if(data.string!=None):
                    cve_constructor_args.append(data.string.strip())
                else:
                    cve_constructor_args.append("N/A")
            cve_constructor_args.append(rows[k+1].findChildren("td")[0].string.strip())
            new_cve=CVE(*cve_constructor_args[1:])
            product.cve_list.append(new_cve)
            #product.show()
            product.convertToJson() 
            k+=2

    
        ctr+=1       



